name: Build & Release Compose App

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to release'
        required: true
        default: 'main'
      version:
        description: 'Optional explicit version. If empty, it will be auto-calculated.'
        required: false

permissions:
  contents: write

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      release_version: ${{ steps.determine_version.outputs.version }}
    steps:
      - name: Checkout (full history & tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine release version
        id: determine_version
        run: |
          # If user provided a version input, use it.
          if [ -n "${{ github.event.inputs.version }}" ]; then
            ver="${{ github.event.inputs.version }}"
          else
            ver=""
            # 1) Try gradle.properties
            if [ -f gradle.properties ]; then
              ver=$(grep -E '^version\s*=' gradle.properties | head -n1 | cut -d'=' -f2- | tr -d '[:space:]')
            fi

            # 2) Try Gradle properties
            if [ -z "$ver" ]; then
              ver=$(./gradlew -q properties --no-daemon 2>/dev/null | sed -n 's/^version: //p' | tr -d '[:space:]' || true)
            fi

            # 3) Try latest git tag
            if [ -z "$ver" ]; then
              git fetch --tags --prune
              ver=$(git describe --tags --abbrev=0 2>/dev/null || true)
            fi

            # 4) Fallback to short SHA
            if [ -z "$ver" ]; then
              short=$(git rev-parse --short HEAD)
              ver="0.0.0-${short}"
            fi
          fi

          echo "version=$ver" >> $GITHUB_OUTPUT
          echo "RELEASE_VERSION=$ver" >> $GITHUB_ENV
          echo "Determined version: $ver"

      - name: Create GitHub release (single release)
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          prerelease: ${{ github.event.inputs.branch != 'main' }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            gradle_task: ":composeApp:packageReleaseDeb"
            artifact_ext: deb
          - os: windows-latest
            gradle_task: ":composeApp:packageReleaseMsi"
            artifact_ext: msi
          - os: macos-latest
            gradle_task: ":composeApp:packageReleaseDmg"
            artifact_ext: dmg

    steps:
      - name: Checkout code (branch to release)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ matrix.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ matrix.os }}-

      - name: Build
        run: ./gradlew ${{ matrix.gradle_task }}

      - name: Find artifact
        run: |
          mkdir -p artifacts
          FILE=$(find composeApp/build/compose/binaries -type f -name "*.${{ matrix.artifact_ext }}" | head -n 1)
          if [ -z "$FILE" ]; then
            echo "No artifact found for ext ${{ matrix.artifact_ext }} (looked for composeApp/build/compose/binaries)."
            ls -la composeApp/build/compose || true
            exit 1
          fi
          cp "$FILE" "artifacts/myapp-${{ needs.create_release.outputs.release_version }}-${{ matrix.os }}.${{ matrix.artifact_ext }}"
          ls -la artifacts

      - name: Upload artifact to the release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/*
          tag_name: ${{ needs.create_release.outputs.release_id }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
